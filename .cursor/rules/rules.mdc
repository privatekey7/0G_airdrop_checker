---
alwaysApply: true
---


# Cursor Rules для TypeScript проектов

## Общие принципы разработки

Работать в TypeScript‑проекте, используя ESLint с flat‑конфигурацией и пресет eslint-config-standard как базовый набор правил стиля. Соблюдать требования ниже при создании файлов, примеров кода и команд.

## Требования к настройке линтера

### Настройка ESLint Flat Config

- Использовать ESLint Flat Config (eslint.config.js), подключая экспорт пресета из eslint-config-standard как один из элементов массива конфигураций.

### Установка зависимостей:
```bash
npm i -D eslint eslint-config-standard @typescript-eslint/parser @typescript-eslint/eslint-plugin
```

### Создать eslint.config.js с содержимым:
```javascript
const standard = require('eslint-config-standard')

module.exports = [
  standard,
  {
    files: ['**/*.ts', '**/*.tsx'],
    languageOptions: {
      parser: require('@typescript-eslint/parser'),
      parserOptions: { project: ['./tsconfig.json'] }
    },
    plugins: { '@typescript-eslint': require('@typescript-eslint/eslint-plugin') },
    rules: {
      // здесь допускаются точечные TS-правила при необходимости
    }
  },
  {
    ignores: ['dist/', 'node_modules/', '**/*.d.ts']
  }
]
```

### Команды npm:
- "lint": "eslint ."
- "lint:fix": "eslint . --fix"

### Требование совместимости:
- Генерировать код и правки так, чтобы lint и lint:fix проходили без ошибок.

## Требования к коду

### TypeScript стандарты:
- Писать на TypeScript (ESNext модули, строгий режим)
- Следовать правилам стиля Standard (без точек с запятой, одинарные кавычки, пробелы)
- В TS‑файлах учитывать правила @typescript-eslint
- Импорты/экспорты — ESM
- **КРИТИЧЕСКИ ВАЖНО**: В ES модулях НЕ использовать `require()` - только `import` и `await import()`
- Не использовать any без необходимости
- Обрабатывать ошибки
- Предпочитать const/let, строгое сравнение, читаемые имена

### ES модули и импорты:
- **ЗАПРЕЩЕНО**: Использовать `require()` в ES модулях
- **ОБЯЗАТЕЛЬНО**: Использовать `import` для статических импортов
- **ОБЯЗАТЕЛЬНО**: Использовать `await import()` для динамических импортов
- **Пример правильного динамического импорта**:
  ```typescript
  // ❌ Неправильно
  const module = require('module-name')
  
  // ✅ Правильно
  const module = await import('module-name')
  const { default: moduleDefault } = await import('module-name')
  ```

### Окружения:
- Если используются глобалы или окружения (jest, worker и т.п.), добавлять соответствующую настройку через комментарии eslint-env или через конфиг.

## Требования к библиотекам и зависимостям

### Безопасность и актуальность:
- **ОБЯЗАТЕЛЬНО**: Использовать только самые современные версии библиотек без известных уязвимостей
- **ОБЯЗАТЕЛЬНО**: При выборе библиотек использовать MCP сервер **context7** для:
  - Проверки актуальности версий библиотек
  - Анализа безопасности зависимостей
  - Получения информации о современных альтернативах
  - Проверки совместимости версий

### Процесс выбора библиотек:
1. Всегда консультироваться с context7 перед добавлением новых зависимостей
2. Проверять наличие уязвимостей в выбранных библиотеках
3. Использовать только активно поддерживаемые проекты
4. Предпочитать библиотеки с регулярными обновлениями безопасности

## MCP серверы для специфических задач

### Визуальные компоненты и UI:
- **ОБЯЗАТЕЛЬНО**: При создании проектов с визуальной частью использовать MCP сервер **shadcn-ui** для:
  - Генерации современных UI компонентов
  - Создания доступных интерфейсов
  - Стилизации с помощью Tailwind CSS
  - Реализации темизации и responsive дизайна

### Веб-автоматизация и навигация:
- **ОБЯЗАТЕЛЬНО**: При запросах типа "зайди/перейти на сайт" использовать MCP сервер **Playwright** для:
  - Автоматизации браузера
  - Навигации по веб-страницам
  - Извлечения данных с сайтов
  - Взаимодействия с веб-элементами
  - Скриншотов и тестирования

## Работа с блокчейном и контрактами

### Библиотеки:
- Для взаимодействия с контрактами использовать **Viem** (проверить актуальность версии через context7)

### Файловая структура для кошельков:
- Если в проекте используются только адреса кошельков → создавать файл `wallets.txt`
- Если используются приватные ключи → создавать файл `keys.txt`
- Ключи из keys.txt всегда должны браться вместе с 0x чтобы было 42 символа

### Запрещенные практики:
- Не использовать в коде fallback и моковые данные

## Выходные требования при любом запросе

### При создании проекта/примера включать блоки:
1. Команды установки зависимостей (предварительно проверив через context7)
2. Содержимое eslint.config.js
3. Фрагменты tsconfig.json с настройками:
   ```json
   {
     "compilerOptions": {
       "strict": true,
       "module": "ESNext",
       "moduleResolution": "Bundler"
     }
   }
   ```
   или `"moduleResolution": "NodeNext"` по контексту
4. Пример .ts файла, проходящего линтер
5. При визуальных проектах - использование shadcn-ui компонентов
6. При веб-автоматизации - использование Playwright

### При добавлении зависимостей:
- Использовать точные команды `npm i -D`
- Всегда проверять актуальность версий через context7
- Указывать конкретные версии без уязвимостей

### При изменениях кода:
- Показывать дифф или полный файл, уже совместимый с eslint-config-standard и @typescript-eslint

## Дополнительные требования

- Всегда проверять совместимость кода с настройками линтера
- Следовать принципам чистого кода и читаемости
- Документировать сложные участки кода
- Использовать строгую типизацию TypeScript
- Избегать императивного стиля в пользу функционального где это уместно
- **КРИТИЧЕСКИ ВАЖНО**: Всегда использовать context7 для проверки безопасности библиотек
- **КРИТИЧЕСКИ ВАЖНО**: При визуальных проектах обязательно использовать shadcn-ui
- **КРИТИЧЕСКИ ВАЖНО**: При веб-навигации обязательно использовать Playwright MCP сервер
- **КРИТИЧЕСКИ ВАЖНО**: При визуальных проектах обязательно использовать shadcn-ui
- **КРИТИЧЕСКИ ВАЖНО**: При веб-навигации обязательно использовать Playwright MCP сервер
- **КРИТИЧЕСКИ ВАЖНО**: При неверном пароле показывать понятное сообщение без технических ошибок
# Cursor Rules для TypeScript проектов

## Общие принципы разработки

Работать в TypeScript‑проекте, используя ESLint с flat‑конфигурацией и пресет eslint-config-standard как базовый набор правил стиля. Соблюдать требования ниже при создании файлов, примеров кода и команд.

## Требования к настройке линтера

### Настройка ESLint Flat Config

- Использовать ESLint Flat Config (eslint.config.js), подключая экспорт пресета из eslint-config-standard как один из элементов массива конфигураций.

### Установка зависимостей:
```bash
npm i -D eslint eslint-config-standard @typescript-eslint/parser @typescript-eslint/eslint-plugin
```

### Создать eslint.config.js с содержимым:
```javascript
const standard = require('eslint-config-standard')

module.exports = [
  standard,
  {
    files: ['**/*.ts', '**/*.tsx'],
    languageOptions: {
      parser: require('@typescript-eslint/parser'),
      parserOptions: { project: ['./tsconfig.json'] }
    },
    plugins: { '@typescript-eslint': require('@typescript-eslint/eslint-plugin') },
    rules: {
      // здесь допускаются точечные TS-правила при необходимости
    }
  },
  {
    ignores: ['dist/', 'node_modules/', '**/*.d.ts']
  }
]
```

### Команды npm:
- "lint": "eslint ."
- "lint:fix": "eslint . --fix"

### Требование совместимости:
- Генерировать код и правки так, чтобы lint и lint:fix проходили без ошибок.

## Требования к коду

### TypeScript стандарты:
- Писать на TypeScript (ESNext модули, строгий режим)
- Следовать правилам стиля Standard (без точек с запятой, одинарные кавычки, пробелы)
- В TS‑файлах учитывать правила @typescript-eslint
- Импорты/экспорты — ESM
- **КРИТИЧЕСКИ ВАЖНО**: В ES модулях НЕ использовать `require()` - только `import` и `await import()`
- Не использовать any без необходимости
- Обрабатывать ошибки
- Предпочитать const/let, строгое сравнение, читаемые имена

### ES модули и импорты:
- **ЗАПРЕЩЕНО**: Использовать `require()` в ES модулях
- **ОБЯЗАТЕЛЬНО**: Использовать `import` для статических импортов
- **ОБЯЗАТЕЛЬНО**: Использовать `await import()` для динамических импортов
- **Пример правильного динамического импорта**:
  ```typescript
  // ❌ Неправильно
  const module = require('module-name')
  
  // ✅ Правильно
  const module = await import('module-name')
  const { default: moduleDefault } = await import('module-name')
  ```

### Окружения:
- Если используются глобалы или окружения (jest, worker и т.п.), добавлять соответствующую настройку через комментарии eslint-env или через конфиг.

## Требования к библиотекам и зависимостям

### Безопасность и актуальность:
- **ОБЯЗАТЕЛЬНО**: Использовать только самые современные версии библиотек без известных уязвимостей
- **ОБЯЗАТЕЛЬНО**: При выборе библиотек использовать MCP сервер **context7** для:
  - Проверки актуальности версий библиотек
  - Анализа безопасности зависимостей
  - Получения информации о современных альтернативах
  - Проверки совместимости версий

### Процесс выбора библиотек:
1. Всегда консультироваться с context7 перед добавлением новых зависимостей
2. Проверять наличие уязвимостей в выбранных библиотеках
3. Использовать только активно поддерживаемые проекты
4. Предпочитать библиотеки с регулярными обновлениями безопасности

## MCP серверы для специфических задач

### Визуальные компоненты и UI:
- **ОБЯЗАТЕЛЬНО**: При создании проектов с визуальной частью использовать MCP сервер **shadcn-ui** для:
  - Генерации современных UI компонентов
  - Создания доступных интерфейсов
  - Стилизации с помощью Tailwind CSS
  - Реализации темизации и responsive дизайна

### Веб-автоматизация и навигация:
- **ОБЯЗАТЕЛЬНО**: При запросах типа "зайди/перейти на сайт" использовать MCP сервер **Playwright** для:
  - Автоматизации браузера
  - Навигации по веб-страницам
  - Извлечения данных с сайтов
  - Взаимодействия с веб-элементами
  - Скриншотов и тестирования

## Работа с блокчейном и контрактами

### Библиотеки:
- Для взаимодействия с контрактами использовать **Viem** (проверить актуальность версии через context7)

### Файловая структура для кошельков:
- Если в проекте используются только адреса кошельков → создавать файл `wallets.txt`
- Если используются приватные ключи → создавать файл `keys.txt`
- Ключи из keys.txt всегда должны браться вместе с 0x чтобы было 42 символа

### Запрещенные практики:
- Не использовать в коде fallback и моковые данные

## Выходные требования при любом запросе

### При создании проекта/примера включать блоки:
1. Команды установки зависимостей (предварительно проверив через context7)
2. Содержимое eslint.config.js
3. Фрагменты tsconfig.json с настройками:
   ```json
   {
     "compilerOptions": {
       "strict": true,
       "module": "ESNext",
       "moduleResolution": "Bundler"
     }
   }
   ```
   или `"moduleResolution": "NodeNext"` по контексту
4. Пример .ts файла, проходящего линтер
5. При визуальных проектах - использование shadcn-ui компонентов
6. При веб-автоматизации - использование Playwright

### При добавлении зависимостей:
- Использовать точные команды `npm i -D`
- Всегда проверять актуальность версий через context7
- Указывать конкретные версии без уязвимостей

### При изменениях кода:
- Показывать дифф или полный файл, уже совместимый с eslint-config-standard и @typescript-eslint

## Дополнительные требования

- Всегда проверять совместимость кода с настройками линтера
- Следовать принципам чистого кода и читаемости
- Документировать сложные участки кода
- Использовать строгую типизацию TypeScript
- Избегать императивного стиля в пользу функционального где это уместно
- **КРИТИЧЕСКИ ВАЖНО**: Всегда использовать context7 для проверки безопасности библиотек
- **КРИТИЧЕСКИ ВАЖНО**: При визуальных проектах обязательно использовать shadcn-ui
- **КРИТИЧЕСКИ ВАЖНО**: При веб-навигации обязательно использовать Playwright MCP сервер
- **КРИТИЧЕСКИ ВАЖНО**: При визуальных проектах обязательно использовать shadcn-ui
- **КРИТИЧЕСКИ ВАЖНО**: При веб-навигации обязательно использовать Playwright MCP сервер
- **КРИТИЧЕСКИ ВАЖНО**: При неверном пароле показывать понятное сообщение без технических ошибок